<code>$<code'>#<code>$fn
<code>$ε$ε
<code'>$<function_declaration>#<function_body>$fn
<function_declaration>$<function_naming>#<function_return>$fn
<function_naming>$<fn_identifier>#<function_param>$fn
<fn_identifier>$<fn>#<identifier>$fn
<function_param>$<oparenthesis>#<function_params>$(
<function_param>$ε$ε
<function_params>$<params>#<cparenthesis>$identifier
<function_params>$)$)
<params>$<variable>#<params'>$identifier
<params'>$<comma_variable>#<params>$identifier
<params'>$<comma>#<params>$,
<params'>$ε$ε
<comma_variable>$<variable>#<comma>$identifier
<function_return>$<colon>#<return_type>$:
<function_return>$ε$ε
<return_type>$int$int
<return_type>$float$float
<return_type>$char$char
<return_type>$str$str
<return_type>$bool$bool
<function_body>$<bracket_function>#<cbracket>${
<bracket_function>$<obracket>#<function_content>${
<function_content>$<function_contents>#<function_content>$let#lem#call#for#ret#identifier#while#if
<function_content>$ε$ε
<function_contents>$<variable_declaration>#<semicolon>$let#lem
<function_contents>$<assignment>#<semicolon>$identifier
<function_contents>$<function_call>#<semicolon>$call
<function_contents>$<if_declaration>#<else_declaration>$if
<function_contents>$<for_declaration>#<flow_body>$for
<function_contents>$<while_declaration>#<flow_body>$while
<function_contents>$<ret>#<return>$ret
<function_contents>$ε$ε
<variable_declaration>$<let>#<multiple_variable>$let
<variable_declaration>$<lem>#<multiple_variable>$lem
<single_variable>$<variable>#<equals_assignment>$identifier
<equals_assignment>$<equals>#<assignment'>$=
<multiple_variable>$<single_variable>#<multiple_variable'>$identifier
<multiple_variable'>$<comma>#<multiple_variable>$,
<multiple_variable'>$ε$ε
<variable>$<identifier>#<variable_type>$identifier
<variable_type>$<colon>#<data_type>$:
<assignment>$<id_equals>#<assignment'>$identifier
<id_equals>$<identifier>#<equals>$identifier
<assignment'>$<value>#<operator>$value
<assignment'>$<identifier>#<operator>$identifier
<assignment'>$<call_identifier>#<call_body>$call
<operation>$<value>#<operator>$value
<operation>$<identifier>#<operator>$identifier
<operator>$<operator_char>#<operation>$+#-#*#/#%#^#&&#||#==#!=#>#<#>=#<=
<operator>$ε$ε
<function_call>$<call_identifier>#<call_body>$call
<call_identifier>$<call>#<identifier>$call
<call_body>$<oparenthesis>#<parenthesis_call>$(
<call_body>$ε$ε
<parenthesis_call>$<call_params>#<cparenthesis>$value#identifier
<call_params>$<operation>#<multiple_call_params>$value#identifier
<multiple_call_params>$<comma>#<call_params>$,
<multiple_call_params>$ε$ε
<if_declaration>$<if_condition>#<flow_body>$if
<if_condition>$<if>#<operation>$if
<else_declaration>$<else>#<flow_body>$else
<for_declaration>$<for>#<for_condition>$for
<for_condition>$<id_in>#<range>$identifier
<id_in>$<identifier>#<in>$identifier
<range>$<value_to>#<range_value>$value
<range>$<identifier_to>#<range_identifier>$identifier
<range_value>$value$value
<range_value>$identifier$identifier
<range_identifier>$value$value
<range_identifier>$identifier$identifier
<value_to>$<value>#<to>$value
<identifier_to>$<identifier>#<to>$identifier
<while_declaration>$<while>#<operation>$while
<flow_body>$<obracket>#<bracket_flow>${
<bracket_flow>$<flow_content>#<cbracket>$ε#identifier#if#while#call#for
<flow_content>$<flow_contents>#<flow_content>$identifier#if#while#call#for
<flow_content>$ε$ε
<flow_contents>$<assignment>#<semicolon>$identifier
<flow_contents>$<function_call>#<semicolon>$call
<flow_contents>$<if_declaration>#<else_declaration>$if
<flow_contents>$<for_declaration>#<flow_body>$for
<flow_contents>$<while_declaration>#<flow_body>$while
<flow_contents>$ε$ε
<return>$<operation>#<semicolon>$value#identifier
<data_type>$int$int
<data_type>$float$float
<data_type>$char$char
<data_type>$str$str
<data_type>$bool$bool
<operator_char>$+$+
<operator_char>$-$-
<operator_char>$*$*
<operator_char>$/$/
<operator_char>$%$%
<operator_char>$^$^
<operator_char>$&&$&&
<operator_char>$||$||
<operator_char>$==$==
<operator_char>$!=$!=
<operator_char>$>$>
<operator_char>$<$<
<operator_char>$>=$>=
<operator_char>$<=$<=
<fn>$fn$fn
<call>$call$call
<let>$let$let
<lem>$lem$lem
<if>$if$if
<else>$else$else
<for>$for$for
<while>$while$while
<in>$in$in
<to>$to$to
<ret>$ret$ret
<identifier>$identifier$identifier
<value>$value$value
<oparenthesis>$($(
<cparenthesis>$)$)
<obracket>${${
<cbracket>$}$}
<colon>$:$:
<semicolon>$;$;
<comma>$,$,
<equals>$=$=
