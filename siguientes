// $ is void

SIGUIENTES(<code>)  =  { $ }
SIGUIENTES(<function_declaration>)  =  { { }
SIGUIENTES(<function_naming>)  =  { : }
SIGUIENTES(<fn_identifier>)  =  { ( }
SIGUIENTES(<function_params>)  =  { : }
SIGUIENTES(<parenthesis_params>)  =  { ) }
SIGUIENTES(<params>)  =  { ) }
SIGUIENTES(<function_return>)  =  { { }
SIGUIENTES(<function_body>)  =  { $ }
SIGUIENTES(<function_closure>)  =  { $ }
SIGUIENTES(<bracket_function>)  =  { } }
SIGUIENTES(<function_content>)  =  { } }
SIGUIENTES(<variable_declaration>)  =  { ; }
SIGUIENTES(<single_variable>)  =  { ; }
SIGUIENTES(<single_variable_declaration>)  =  { identifier }
SIGUIENTES(<multiple_variable>)  =  { ; }
SIGUIENTES(<multiple_variable_declaration>)  =  { ,, ; }
SIGUIENTES(<comma_multiple>)  =  { ; }
SIGUIENTES(<variable>)  =  { , }
SIGUIENTES(<variable_type>)  =  { ,, identifier, ) }
SIGUIENTES(<assignment>)  =  { ;, , }
SIGUIENTES(<id_equals>)  =  { value, identifier }
SIGUIENTES(<operation>)  =  { ,, {, ;, ) }
SIGUIENTES(<operator>)  =  { ,, {, ;, ) }
SIGUIENTES(<function_call>)  =  { ; }
SIGUIENTES(<call_identifier>)  =  { ( }
SIGUIENTES(<call_body>)  =  { ; }
SIGUIENTES(<parenthesis_call>)  =  { ) }
SIGUIENTES(<call_params>)  =  { ) }
SIGUIENTES(<operation_comma>)  =  { value, identifier }
SIGUIENTES(<if_declaration>)  =  { else }
SIGUIENTES(<if_condition>)  =  { { }
SIGUIENTES(<else_declaration>)  =  { } }
SIGUIENTES(<for_declaration>)  =  { { }
SIGUIENTES(<for_condition>)  =  { { }
SIGUIENTES(<id_in>)  =  { value, identifier }
SIGUIENTES(<range>)  =  { { }
SIGUIENTES(<value_to>)  =  { value, identifier }
SIGUIENTES(<identifier_to>)  =  { identifier, value }
SIGUIENTES(<while_declaration>)  =  { { }
SIGUIENTES(<flow_body>)  =  { }, else }
SIGUIENTES(<bracket_flow>)  =  { } }
SIGUIENTES(<flow_content>)  =  { } }
SIGUIENTES(<variable_comma>)  =  { identifier }
SIGUIENTES(<data_type>)  =  { ,, identifier, ), { }
SIGUIENTES(<nothing>)  =  { { }
SIGUIENTES(<operator_char>)  =  { value, identifier }
SIGUIENTES(<fn>)  =  { identifier }
SIGUIENTES(<call>)  =  { identifier }
SIGUIENTES(<let>)  =  { identifier }
SIGUIENTES(<mlet>)  =  { identifier }
SIGUIENTES(<lem>)  =  { identifier }
SIGUIENTES(<mlem>)  =  { identifier }
SIGUIENTES(<if>)  =  { value, identifier }
SIGUIENTES(<else>)  =  { { }
SIGUIENTES(<for>)  =  { identifier }
SIGUIENTES(<while>)  =  { value, identifier }
SIGUIENTES(<in>)  =  { value, identifier }
SIGUIENTES(<to>)  =  { identifier, value }
SIGUIENTES(<identifier>)  =  { to, in, +, *, /, %, ^, &&, ==, !=, >, <, >=, <=, =, :, {, ( }
SIGUIENTES(<value>)  =  { to, +, *, /, %, ^, &&, ==, !=, >, <, >=, <=, { }
SIGUIENTES(<oparenthesis>)  =  { value, identifier, ) }
SIGUIENTES(<cparenthesis>)  =  { ;, : }
SIGUIENTES(<obracket>)  =  { identifier, if, while, call, for, }, let, mlet, lem, mlem }
SIGUIENTES(<cbracket>)  =  { fn, }, else, $ }
SIGUIENTES(<colon>)  =  { int, float, char, str, bool, nothing }
SIGUIENTES(<semicolon>)  =  { } }
SIGUIENTES(<comma>)  =  { identifier, value }
SIGUIENTES(<equals>)  =  { value, identifier }
