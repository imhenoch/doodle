// $ is void

SIGUIENTES(<code>)  =  { $ }
SIGUIENTES(<function_declaration>)  =  { { }
SIGUIENTES(<function_naming>)  =  { ( }
SIGUIENTES(<function_params>)  =  { { }
SIGUIENTES(<parenthesis_params>)  =  { ) }
SIGUIENTES(<params>)  =  { ) }
SIGUIENTES(<function_body>)  =  { $ }
SIGUIENTES(<function_closure>)  =  { $ }
SIGUIENTES(<bracket_function>)  =  { } }
SIGUIENTES(<function_content>)  =  { } }
SIGUIENTES(<variable_declaration>)  =  { ; }
SIGUIENTES(<let_mut>)  =  { identifier }
SIGUIENTES(<variables>)  =  { ; }
SIGUIENTES(<var_assignment>)  =  { identifier }
SIGUIENTES(<variable_assignment>)  =  { ;, identifier }
SIGUIENTES(<variable>)  =  { identifier, , }
SIGUIENTES(<variable_type>)  =  { identifier, ,, ), ; }
SIGUIENTES(<assignment>)  =  { ;, , }
SIGUIENTES(<id_equals>)  =  { value, identifier }
SIGUIENTES(<operation>)  =  { ;, identifier, ,, {, ) }
SIGUIENTES(<operator>)  =  { ;, identifierm, ,, {, ) }
SIGUIENTES(<function_call>)  =  { ; }
SIGUIENTES(<call_body>)  =  { ; }
SIGUIENTES(<parenthesis_call>)  =  { ) }
SIGUIENTES(<call_params>)  =  { ) }
SIGUIENTES(<operation_comma>)  =  { value, identifier }
SIGUIENTES(<if_declaration>)  =  { { }
SIGUIENTES(<for_declaration>)  =  { { }
SIGUIENTES(<for_condition>)  =  { { }
SIGUIENTES(<id_in>)  =  { value, identifier }
SIGUIENTES(<range>)  =  { { }
SIGUIENTES(<value_to>)  =  { value, identifier }
SIGUIENTES(<identifier_to>)  =  { identifier, value }
SIGUIENTES(<while_declaration>)  =  { { }
SIGUIENTES(<flow_body>)  =  { } }
SIGUIENTES(<bracket_flow>)  =  { } }
SIGUIENTES(<flow_content>)  =  { } }
SIGUIENTES(<variable_comma>)  =  { identifier }
SIGUIENTES(<data_type>)  =  { identifier, ,, ), ; }
SIGUIENTES(<operator_char>)  =  { value, identifier }
SIGUIENTES(<fn>)  =  { identifier }
SIGUIENTES(<let>)  =  { mut, identifier }
SIGUIENTES(<mut>)  =  { identifier }
SIGUIENTES(<if>)  =  { value, identifier }
SIGUIENTES(<for>)  =  { identifier }
SIGUIENTES(<while>)  =  { value, identifier }
SIGUIENTES(<in>)  =  { value, identifier }
SIGUIENTES(<to>)  =  { value, identifier }
SIGUIENTES(<identifier>)  =  { (, :, =, +, *, /, %, ^, &&, ||, ==, !=, >, <, >=, <=, in, to, { }
SIGUIENTES(<value>)  =  { +, *, /, %, ^, &&, ||, ==, !=, >, <, >=, <=, {, to }
SIGUIENTES(<oparenthesis>)  =  { ), identifier, value }
SIGUIENTES(<cparenthesis>)  =  { {, ; }
SIGUIENTES(<obracket>)  =  { let, identifier, if, for, while, } }
SIGUIENTES(<cbracket>)  =  { fn, } }
SIGUIENTES(<colon>)  =  { int, float, char, str, bool }
SIGUIENTES(<semicolon>)  =  { } }
SIGUIENTES(<comma>)  =  { ;, identifier, value }
SIGUIENTES(<equals>)  =  { value, identifier }
